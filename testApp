
return scaffold(
	appBar : AppBar(title : Text('Forum'))
	body : Auth(),
	)
)

class MyApp extends StateFullWidget{
	
	createState(){
	return _MyAppState()
   }
}

class _MyAppState extends State<>{

	Widget Build(){
		return MaterialApp(
			home : scafold(
				body : MaterialRoutePage((BuildContext context){return Auth()})
			)
			route: {'\', MaterialRoutePage}
			theme : ThemeData(),
			onGeneratedRoute : <manipulating the route>
			onUnknownRoute : <>
		)
	
	}
}


class Auth extends statelesswidget{
	Widget Build (){
		return Container(
			child : Column(
				children : <Widget>[					
						
							RaisedButton(
								child : Text('Singin with Google'),
								textColor: Colors.orange,
								onClicked : (){
									// Check session
									//call firebase to oAuth login
									//save session for all pages. 
									//then move to Dashboard --> Navigator.pushNamed('/dash')
								}
							),
							
							RaisedButton(
								child : Text('Singin with Google'),
								textColor: Colors.orange,
								onClicked : (){
									//pop up form
									// call firebase for email/pass login 
									// save session.	
									//then move to Dashboard --> Navigator.pushNamed('/dash')
									
								}
							)
						
						]
			
			)
		)
	
	}

}


class DashBoard extends StateFullWidget{
	createState(){
		return _DashBoard();
	}
}

class _DashBoard extends state{
	List<CustomThread> threads;
	
	void addThread(CustomThread thread){
		setState((){
			threads.add(thread);
		});		
	}
	void updateThread(int index, CustomThread thread){
		setState((){
			threads.add(thread);
		});		
	}
	void deleteThread(CustomThread thread){
		setState((){
			threads.add(thread);
		});		
	}
	
	return Scafold(
		appBar : AppBar(title : Text('Head')),
		body: Column(
			children : <Widget>[ --if not work use expanded.
				new ListView.builder
				  (
					itemCount: threads.length,
					itemBuilder: (BuildContext ctxt, int index) {
						return threads[index];
					}
				  )
			]
		)
	)
}



class CustomThread extends StatelessWidget{
	
	return Cards(
		child : ListTile(
			child : Text('Text1'),
			leading : ,
			onTap : (){
				logic to view the thread and 
				
			}
		)
	)
	
}



clas Login extends statelesswidget{
	string email; 
	string password;
	bool remember;
	Widget Build(BuildContext context){
		return Scafold(
			body : Column(
				children : <>[
					TextField(
						onChanged : (String value){
							email = value;
						},
						initValue : 'email',
						KeyboardType = TextInputType.email,
						decoration : InputDecoration(
							labelText : 'Email',
						),
					
					);
					TextField(
						onChanged : (String value){
							password = value;
						},
						
						obsecuretext = true,
						decoration : InputDecoration(
							labelText : 'password',
						),
					
					);
					SwitchListTile(
						title : Text('Remember Device'),
						value : false,
						onChanged : (bool v){ remember = true;}
					);
					RaisedButton(
						onPressed : (){call firebase api.},
						child : Text('Submit'),
						color : Colors.blue,						
					)
				]
			)
		)
	
	}

}


---Using Form------

class Login extends StatelessWidget{
	final GlobalKey formKey = GlobalKey();
	final string email ;
	final string password ;
	
	widget build(BuildContext context){
		return Scafold(
			body : Form(
				key : formKey,
				child : Column(
					children : <>[
						TextFormInput(
							decoration : InputDecoration(lableText : 'e-mail')
							validator : (String v){
								if(!v.contains('@'))
									return 'please enter valid email' ;
							},
							onSaved : (String v){
								email = v;
							},
							InitialVlaue : 'email',
							keyboardType : TextInputType.emailAddress,
						),
						TextFormInput(
							decoration : InputDecoration(lableText : 'password'),
							validator : (string v){
								if(! v.length > 8)
									return 'password length should be more than 8 character ';
							},
							onSaved : (string v){
								password = v ; 
							},
							InitialVlaue : 'pass',
							obsucuretext : true,
						),
						RaisedButton(
							child : Text('Submit'),
							onPressed : (){
								if(formKey.currentStatus.validate())
									formKey.currentStatus.save();	
							}
						)
						
					]
				)
			
			)
		
		)
	}

}


MinJumpReachToEnd
int m1 = Integer.MAX_VALUE, m2 = Integer.MAX_VALUE;		
if(i >= (ar.length-1)){
	System.out.println("j:: "+j);
	map.put(j, s);
	return j;
}		

for (int k = 1; k <= ar[i]; k++) {
	m1 = execute(ar,i+k,j+1,s+ar[i]);	
	m2 = Math.min(m1,m2);
}

return m2;
