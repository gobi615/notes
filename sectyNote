SQL Injection
Injection attacks happen when untrusted data is sent to a code interpreter through a form input or some other data submission to a 
web application. For example, an attacker could enter SQL database code into a form that expects a plaintext username. 
If that form input is not properly secured, this would result in that SQL code being executed. This is known as an SQL injection attack.
Security approach :  Injection attacks can be prevented by validating and/or sanitizing user-submitted data. 

Broken Authentication
Vulnerabilities in authentication (login) systems can give attackers access to user accounts and even the ability to compromise an 
entire system using an admin account. For example, an attacker can take a list containing thousands of known username/password combinations
obtained during a data breach and use a script to try all those combinations on a login system to see if there are any that work.
Security approach :  Some strategies to mitigate authentication vulnerabilities are requiring 2-factor authentication (2FA) as well as 
limiting or delaying repeated login attempts using rate limiting.

Sensitive Data Exposure
If web applications don’t protect sensitive data such as financial information and passwords, attackers can gain access to that data and 
sellor utilize it for nefarious purposes. One popular method for stealing sensitive information is using a man-in-the-middle attack.
Security approach : Data exposure risk can be minimized by encrypting all sensitive data as well as disabling the caching* of any 
sensitive information. Additionally, web application developers should take care to ensure that they are not unnecessarily storing any 
sensitive data.

Cross site scripting  ( XSS )
Cross-site scripting vulnerabilities occur when web applications allow users to add custom code into a url path or onto a website that 
will be seen by other users. This vulnerability can be exploited to run malicious JavaScript code on a victim’s browser. For example, 
an attacker could send an email to a victim that appears to be from a trusted bank, with a link to that bank’s website. This link could 
have some malicious JavaScript code tagged onto the end of the url. If the bank’s site is not properly protected against cross-site 
scripting, then that malicious code will be run in the victim’s web browser when they click on the link.
Security approach : Mitigation strategies for cross-site scripting include escaping untrusted HTTP requests as well as validating and/or 
sanitizing user-generated content. Using modern web development frameworks like ReactJS and Ruby on Rails also provides some built-in 
cross-site scripting protection.
