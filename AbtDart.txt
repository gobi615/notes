Steps 
Install Flutter SDK 
Run Flutter Doctor Command
Install Dart and flutter Plugins in IDE
If use VS Code use Android Studio to setup AVD. And Run an AVD device 
Start Without Debug in VSCode to begin.
-------------------------------------------------

Start of App: 

main(){
debugPaintSizeEnabled = true; -- widget border
debugPaintSizeBaselinesEnabled = true; -- not much usefull 
debugPaintPointersEnabled = true; -- not much useful 
runApp(1stWidget())
}

Notes:
@Override annotation not req
Whenever any image or s
tatic data is added, need to mention in pubspec.yaml file under assests section as in commented text format.
setState((){}) callback is executed for statefull widget state changes 
initState() - runs before build method when state first creates.
for statefull widget data can be pased using widget property
StateLess --> constructor(), build()
StateFull --> constructor(), initState(), build(), setState(), didUpdateWidget()-->build(), 
positional argument and name argument 
Container() - if nothing wants to print on screen return empty container instead of null.

Numbers: num data type(stores int and double) => Split into int  (e.g. 42 ) and double (e.g. 2.5 )
Text: String  => e.g. 'Hello!' 
Booleans: bool => true  or false 
Lists: Multiple, ordered elements => e.g. List<int> things = [1, 2, 3];
Maps: Multiple, named and unordered elements => 
Map state = { 'lucky': 23 };
state['unlucky'] = 11; 

void initState() {
    super.initState();
    _products.add(widget.startingProduct);  
}

StateFull --> State clas has the inner changing variable, the connected statefull class is immutable class so the varibale declared are final.
		To access the properties of the connected statefull class use widget keyword in initState method of state class. with this we can pass data from other class to this statefull class constructor and it comes to state.
		
final vs const 
- final - one time assignable in the environment. can modify the object properties.
  const - one time assignable and can not modify the object properties. means constant

BuildContext

'\$${products[index]['price'].toString()}'  ----> baclslash is escape sequence in dart. 
Listview always takes full availabel space in container. 

mainAxisAlignment of column gives alignment in vertical direction in top, center, bottm.
to add spcing surround column with container and apply padding in container. 
Container(
	child : Column(
		[]
	)
)
In Center there is heightfactor which helps to add height. 
Center(
	child : Container(
		child: 
	)
)
other way is adding 
SeizedBox() -- specify the space in pixels. or  
Spacer() -- adds space by flex properties.

Container() --
	1. try to be big as possible if no child. 
	2. if child ava, occupy child space.
	3. if child and align have, try big as possible and aligns child in that space. 
	
Differences between SliverList vs ListView in Flutter
There's almost no difference.
ListView is a SliverList. Same with GridView, which is a SliverGrid.
They are doing exactly the same thing. The only difference between them is that SliverList is a sliver, not a widget. Which means it's used inside a ScrollView, usually CustomScrollView.
ListView is nothing else but a biding of SliverList to transform it into a Widget to make it usable alongside other widgets such as Row/Container.
Most of the time, use ListView.
But if you want advanced scroll behavior such as appbar animations with scroll ; you'll need to use a CustomScrollView. Which will force you to use SliverList instead of ListView.


Issue on InheritedWidget ==> Its immutable. 
Issue on ScopedModel ==> need to explicitly mention to not to rebuild at each place we using the scoped decendent.
 
decoration --> BoxDecoration, ShapeDecoration, InputDecoration, TextDecoration
shape ---> RoundedRectangleBorder, OutlineInputBorder
	

List Of Widgets
----------------------
StatelessWidget(@O Build())
MaterialApp( home: Scafold(),theme: ThemeData(), debugShowMaterialGrid : true, routes:{}, title : ''
onGenerateRoute: (RouteSettings){ return MaterialPageRoute()}, onUnknownRoute(RouteSettings){   return MaterialPageRoute(0} )
ThemeData(primarySwatch : Colors.,accentColor: Colors., brightness : Brightness.)
Scafold(appBar: AppBar(),body: widget(), drawer: Drawer())
AppBar(title: widget-> Text/Row/Column, elevations: , bottom: TabBar(), centerTitle : bool, actions: <widget>[], iconTheme :IconThemeData(), textTheme : TextTheme() )
Text('', style : TextStyle(fontSize: double, fontWeight : FontWeight.bold, fontFamily : 'Oswald', decoration : TextDecoration.underline ))
MaterialPageRoute(builder: (){ return widget})
Card(child: Widget)
Column(crossAxisAlignment: CrossAxisAlignment.center, children: Widget[])
Image()
Image.asset(path given in assests of yaml file to display the image)
Container(margin: EdgeInsects(), child: widget(),height:double number, padding : EdgeInsects.only(top : 10), 
decoration: BoxDecoration() )

RaisedButton(child: Widget(), onPressed: (){},color: Colors., textColor: Colors. , shape : RoundedRectangleBorder(), ) #color: Theme.of(context).primaryColor or accentColor
IconButton(icon: Icon(Icons.), onPressed : (){}, color : , tooltip : string, )
ListView( children: widget) -- we cant use beneath other widget
Expanded(child: widget) - takes remaining space
ListView.builder(itemBuilder: widget, itemCount: length,) 
ButtonBar(alignment: MainAxisAlignment.center, children: widget[])
FlatButton(child: , onPressed: (){})
Navigator.push(context, MaterialPageRoute(builder: (context){widget}) ) -- 
	Also can pass value in argument of widget.
	
Navigator.pop(context, [true]) - placed on a onPressed in button
	an Future is returned from pop method. Where we can pass data from pop to push. 

Navigator.pushReplacement(context,MaterialPageRoute(builder: (BuildContext context) => ProductsPage()),);
Navigator.pushReplacementNamed(context, '/admin');	
onGenerateRoute: (RouteSettings settings) {return MaterialPageRoute()}
onUnknownRoute: (RouteSettings settings) {return MaterialPageRoute()}
Drawer(child: widget())
	automaticallyImplyLeading :false --> not inherit from parent
ListTile(leading: Icon(), title: Text(), onTap:(){})
Icon(Icons.list)
WillPopScope( onWillPop: 
	(){should return a future with value true/false. With this future value we can go back without pop method. should not use them both}) --> 
DefaultTabController(length: 2, child: widget(), ) 
TabBar(tabs: <widget>[Tab(), ...])  -- particularly arrays of tabs widget. -- in Appbar, bottom properties.
Tab(icon: Icons(), text : string)
TabBarView(children: <>[]) 
TextField(decoration : InputDecoration(border : ), onChanged : (){}, maxLines: 4,keyboardType: TextInputType.number,obscureText: true,)
InputDecoration(hintText : string,labelText: string, filled: boolean, fillColor : Colors.white, errorText : snapshot.error)
SwitchListTile(value: bool, onChanged :(){}, title: Text())
SizedBox(height: decimal, width : decimal) 
AlertDialog(title: Text('') ,content: Text(), actions: <widget>[btn1, btn2])
Row( mainAxisAlignment: MainAxisAlignment.center, children : <widget>[], )
BoxDecoration(color: , border: Border.all, borderRadius :BorderRadius.circular(5.0), image : DecorationImage() )
DecorationImage(fit: BoxFit.cover, colorFilter : , image : AssetImage('assets/background.jpg'))
AssetImage('assets/background.jpg')
Center(child : , )
SingleChildScrollView(padding : , scrollDirection : , child : , physics : BouncingScrollPhysics(),)
BouncingScrollPhysics()
GestureDetector(child: , onTap: (){])
SafeArea(child : ) --> put in scafold body. to sefely place objects.
RoundedRectangleBorder(borderRadius : BorderRadius.circular(5.0)
OutlineInputBorder(borderRadius : ) -- comes inside decoration
Spacer(flex : number)
CircleAvatar(),
LinearGradient(),
ClipPath(clipper : CustomClipper), 
Align(alignment : Alignment.bottomcenter, child : )
Divider(color : , height : double) -- creates a divider line between widgets. eg in between form fields.
Positioned(child : , bottom : , right : ,), -> position widget in the screen. 
Stack(overflow : ,) --> 
Wrap() --> wraps children inside the available space. 
AnimatedContainer() --> can animate an 	container, can increase its length, width, elivation on the box.
Opacity(child : , ), AnimatedOpacity() ---> to hide an widget or obj. or animate an obj by hiding and showing.
FutureBuilder(future : , build : ) -> for async communication, or http communication, give an future and check connection before geeting data from snaPSHOT.
FadeTransition (opacity : , child : ) --> Fades an obj or widget with help of  AnimatedContainer()
FloatingActionButton (child : , onPressed : (){}, bottomNavigationBar : BottomAppBar(), floatingActionButtonLocation : floatingActionButtonLocation.centerDocked) --> can do docking button to bottombar. 
BottomAppBar(color : , child : ) --> bottom menus also with FAB.
PageView(controller : , children : <>[], scrollDirection : , pageSnapping : ,) --> with PageController can create PageView().
Table(defaultVerticalAlignment: TableVerticalAlignment.top, defaultColumnWidth:FlexColumnWidth(1.0)/IntrinsicColumnWidth(), children : [TableRow(children : [])]) --> scroll not want then Table(), else Grid()
SliverAppBar(floating : bool, flexibleSpace : FlexibleSpaceBar(), expandedHeight : ,) --> appBar Scroll effects used with CustomScrollView(sliver : <>[])
FlexibleSpaceBar(background : , title : ) --> used in silverAppBar --
SliverFixedExtentList(itemExtend : , delegate : SliverChildListDelegate([]))
SliverList() & SliverGrid()  --> used in customScroll widget for scroll animations.
FadeInImage.memoryNetwork/assetNetwoek(placeholder: , image : ,) --> some anime if image loading from any network. 
ClipRRect(borderradius : , clipbehaviour : , ) -- to clip corner of a square. 
ClipPath(), ClipOval()
Hero() --> animation when routing widget. 
CustomPaint(painter : , child : ) --> draw an UI/shape in the page and paint. create a child class of cusompaint and impletent on two methods.
ToolTip(message : , child : )
FittedBox(alignment : ,fit : , child : ,)
LayoutBuilder((context, constraint){}) --> build based on screen size of the user. eg.SingleColumnLayout/TwoColumnLAyout
AbsorbPointer(absorbing : bool, child : ) --> to disable click effect in screen. can bulk widget under this widget to disble grouply.
Transform() --> to create trasftom animation or effect.
BackdropFilter(filter: , child : ) - apply filter rotation, skew, blur on images beneath the cild. Mostly used in Stack() widget.  
Align(alignment : , child : ) - Place widget in defined area of parent widget. Use in Container, Stack. 
Positioned (top : , left: ...) -- > used in Stack() to position a widget. 
AnimatedBuilder(animation : , child : , builder: ) -- > build on animation.
Dismissible(child: , onDismissable : (){}, background: widget, secondaryBackground : widget, direction : DisMisDirection.vertical,)
ValueListenableBuilder(valueListenable: , child: , builder: (context, value,child){}, ) --> ValueNotifier to declare a variable. builds if value changes.
Draggable(state: , child : , childWhenDragging: , feedback : ,)
DragTarget(onAccept: (value){},onWillAccept:(value){},onLeave:(value){},builder :(context, candidate, reject){}) --> landing zone for draggable. 	  	
AnimatedList(initialItemCount: ,itemBuilder: (context, animation, index){})-->Dynamic lists also called. 
	AnimatedList.of(context).inserItem(index)/removeItem(index, (context, animation){}), --> inside list
	GlobalKey anywhere else.
SlideTransition
Flexible(flex : , child : , fit : FlexFit.tight)
AnimatedIcon(icon : , progress : ,) --> needs an animation obj.
AspectRation(child: , aspect : , ) --> enclose with Expanded() widget. use allign to position. eg. aspect 3/2.
LimitedBox(maxHeight : number,child : ,) --> A box that limits its size only when it's unconstrained. eg. used in ListView() wrap a widget.
PlaceHolder(color : , stokeWidth : , fallbackheight: ) --> a box to indicate work in progress message in UI.
RichText(text : TextSpans()) with TextSpans()
TextSpans(style : , children : ,)
ReorderableListView(children : , onReorder: (oldIndex, newIndex){}, header : ) --> drag and change order of an ListView().
AnimatedSwitcher(duration : ,transitionbuilder: (){},child : ) --> animation between switching widgets.
AnimatedPositioned() --> animate new positioning of the widget.
AnimatedPadding(padding : , duration : ,child : ,curve : ) --> like padding with animation.
IndexedStack(children : ,index : ) --> in multiple widgets one which is at the index is visible. --> carosol used.
Semantics() --> defines what the UI widget means.
ConstrainedBox() --> specifing maxHeight/maxWidth on box model.
AnimatedOpacity(child : opacity : , duration : , curve: ) --> fadeout unselected UI 
CustomScrollView() --> creates custom scroll effects using silvers.
SliverGrid(gridDelegate : SliverGridDelegateWithMaxCrossAxisExtent(), delegate: SliverChildBuilderDelegate())
SliverFixedExtentList()

--*-------------*-----
Form(key : GlobalKey<FormState>() --> objet, child : Column())  -- > key obj used to control whole form obj/data.
TextFormField(focusNode: , decoration: , initialValue, maxLines: ,keyboardType : , validator : (){}, onSaved : (){}, obscureText : , ) --> used in forms with validation.
Note: below two lines executed in submit method.
_formKey.currentState.save(); --> to execute each onSaved function to save the form value.  No return type.
_formKey.currentState.validate()  --> to execute each validate method of field and returns any string if validation fails. returns boolean.
FocusNode() --> each form field has a FoucusNode obj. we can manually create and assign one to controll field focus based on choice. 
EnsureVisibleWhenFocused(focusNode :FocusNode(), child : TextFormField() )
-- to turn off field focus by licking anywhere on the form. 
Widget pageContent = GestureDetector(
      onTap: () {
        FocusScope.of(context).requestFocus(FocusNode());
      },
      child: Container(


classes: 
----------------
List p = [], p.map((elements){})--# called iterable, p.add() --#to add things in the list, use .toList to convert it as list,   
Colors.black
EdgeInsects(),
EdgeInsects.all()
EdgeInsets.symmetric(horizontal: 6.0, vertical: 2.5)
EdgeInsets.only()
Brightness()
Brightness.
Icons.create, .list --> icons class. 
double.parse(value)
FontWeight.bold
CrossAxisAlignment.center
TextInputType.emailAddress
Border.all
BoxFit.cover,
ColorFilter.mode(Colors.black.withOpacity(0.5), BlendMode.dstATop)
BlendMode.dstATop
MediaQuery.of(context).size.width   --> has lot of option to know about the device.
Alignment.bottomRight
BorderRadius.circular(double)
TextDecoration.underline
Alignment.bottomcenter
Alignment(1.0, 1.0);
FractionalOffset(0,0),
AlignmentDirectional(1.0, 1.0)
floatingActionButtonLocation.centerDocked
DisMisDirection.vertical
Curves.easeInOut

Functions:
-------------------------
showDialog(context: , builder: (){ return AlertDialog()}, )



-------------------------------------------------------------------------------------------------------------------------------------------

Firebase 
----

plugins - flutterfire.

From Dart, you get the reference to Cloud Firestore by calling Firestore.instance
Firestore.instance.collection('baby').snapshots() to return a stream of snapshots.

Adding a new DocumentReference:
Firestore.instance.collection('books').document().setData({ 'title': 'title', 'author': 'author' });

Get a specific document:
Firestore.instance.collection('talks').document('document-name').get().then((DocumentSnapshot ds) {
      // use ds as a snapshot
    });


CollectionReference myCollection = Firestore.instance.collection('todolist');
DocumentReference ds=Firestore.instance.collection('todolist').document(taskname);
ds.setData(tasks).whenComplete((){})






------------------------------------------------------------------------------------------------------------------------------------

Quiz App

Widget

MultiProvider( providers: [], child : ) - array of provider. from provider package.
MaterialApp(navigatorObservers : FirebaseAnalyticsObserver(analytics: FirebaseAnalytics()),) // Firebase Analytics
ThemeData(fontFamily : , bottomAppBarTheme : BottomAppBarTheme(), brightness : Brightness.dark,  textTheme: TextTheme(),buttonTheme:ButtonThemeData())
BottomAppBarTheme(color: )
TextTheme(body1 : TextStyle(fontSize : 18), body2 : , button : TextStyle(letterSpacing: 1.5, fontWeight: FontWeight.bold),headline :		  TextStyle(fontWeight: FontWeight.bold),subhead : TextStyle(color: Colors.grey))
FutureBuilder(future: , builder : )


class 

Brightness.dark




--------------------------------------------------------------------------------------------------------------------------------------
Old Course. 

BLOC
StreamController, StreamTransformer in async package.  
Sink , Stream, StreamController
BehaviorSubject() -- a stream Controller to listen more than one place. 
StreamBuilder(stream : a stream ,builder : (){return widget} )  -- Widgets to listen stream. 
StreamTransformer<String, String>.fromHandlers(
	handleData: (email, sink) {
				if (email.contains('@')) {
				  sink.add(email);
				} else {
				  sink.addError('Enter a valid email');
				}
	}
We can pass a function reference where anonyms function executes.
Single Global SCope, Scoped Model(using the of keyword. Widgets can use under the parent widget which gives scoped instances.  )

(_) --> underscore means i dont care argument for this particular function.  

rxDart comes because of limitation of async package. rxdart provides wide set of operations for streams.  

	Stream	(async)		 ----- 	Observable (rxdart)
	StreamController(async) ----	Subject(rxdart)

InheritedWidget --> base class for widgets that propagate information efficiently down the tree.
, Povider.of(context) --> used for scoped instances. -- to get common obj. 

Publish Subject - Here, if a student entered late into the classroom, he just wants to listen from that point of time when he entered the classroom
Behavior Subject - It emits the most recently emitted item and all the subsequent items of the source Observable when an observer subscribes to it
Replay Subject - if a student entered late into the classroom, he wants to listen from the beginning
Async Subject - if a student entered at any point of time into the classroom, and he wants to listen only about the last thing(and only the last thing) being taught, after class is over. So, here we will use Async.



------------------------------------------------------------------------------------------------------------------------------------

Maps in JS 

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
https://howtodoinjava.com/typescript/maps/

var map1 = new Map([[1 , 2], [2 ,3 ] ,[4, 5]]);
var map2 = new Map([["firstname" ,"sumit"], ["lastname", "ghosh"], ["website", "geeksforgeeks"]]); 
var map3 = new Map([["whole numbers", [1 ,2 ,3 ,4]],["Decimal numbers" , [1.1, 1.2, 1.3, 1.4]],["negative numbers", [-1, -2, -3, -4]]]);
var map4 = new Map([[["first name", "last name"],["sumit", "ghosh"]],[["friend 1", "friend 2"], ["sourav","gourav"]]]);

 
 
 keytool -exportcert -list -v -alias blog-key -keystore <path-to-production-keystore>
 
 keytool -list -v -alias androiddebugkey -keystore %USERPROFILE%\.android\debug.keystore
 
 random quotes api.
 https://api.quotable.io/random